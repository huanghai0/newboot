<configuration>
	<!-- 日志最大的历史 -->
	<property name="MAX_HISTORY" value="30"/>
	<!-- 组件名称 -->
	<property name="MODULE_NAME" value="mgr"/>
	<!-- 日志文件目录 -->
	<property name="DIR" value="logs"/>
	<!-- 日志文件大小上限 -->
	<property name="MAX_FILE_SIZE" value="100MB"/>

 	<!-- 开启JMX管理日志 -->
	<jmxConfigurator />
	<!-- 输出到控制台 -->
	<appender name="STDOUT"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!-- 输出格式 -->
			<pattern>
				%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} %X{traceId} - %msg%n
			</pattern>
		</encoder>
	</appender>

	<!-- error级别单独记录 -->
	<appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">  
		<file>${DIR}/${MODULE_NAME}-error.log</file>
		<!-- 以day为单位自动回滚 -->  
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
			<fileNamePattern>${DIR}/${MODULE_NAME}-error/${MODULE_NAME}-error-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>  
			<maxHistory>${MAX_HISTORY}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
		    	<!-- or whenever the file size reaches 100MB -->  
		        <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>  
		    </timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>  
		<encoder>  
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{35} %X{traceId} - %msg%n</pattern>
		</encoder>
		<!-- error级别过滤器 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>  
			<onMatch>ACCEPT</onMatch>  
			<onMismatch>DENY</onMismatch>
		</filter>  
	</appender> 
	
	<!-- warn级别单独记录 -->
	<appender name="warnAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">  
		<file>${DIR}/${MODULE_NAME}-warn.log</file>
		<!-- 以day为单位自动回滚 -->  
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
			<fileNamePattern>${DIR}/${MODULE_NAME}-warn/${MODULE_NAME}-warn-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>  
			<maxHistory>${MAX_HISTORY}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
		    	<!-- or whenever the file size reaches 100MB -->  
		        <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>  
		    </timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>  
		<encoder>  
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{35} %X{traceId} - %msg%n</pattern>
		</encoder>
		<!-- error级别过滤器 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>  
			<onMatch>ACCEPT</onMatch>  
			<onMismatch>DENY</onMismatch>
		</filter>  
	</appender> 
	
	<appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">  
		<file>${DIR}/${MODULE_NAME}.log</file>  
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
			<fileNamePattern>${DIR}/${MODULE_NAME}/${MODULE_NAME}-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>  
			<maxHistory>${MAX_HISTORY}</maxHistory>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
		    	<!-- or whenever the file size reaches 100MB -->  
		        <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>  
		    </timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>  
		<encoder>  
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{35} %X{traceId} - %msg%n</pattern>
		</encoder>
		<!--<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>  
			<onMatch>ACCEPT</onMatch>  
			<onMismatch>DENY</onMismatch>
		</filter>-->
	</appender>
	
	<appender name="ASYNCSTDOUT" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 -->
		<discardingThreshold>0</discardingThreshold>
		<queueSize>512</queueSize>  
		<appender-ref ref="STDOUT" />
	</appender>
	
	<appender name="ASYNCerrorAppender" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 -->
		<discardingThreshold>0</discardingThreshold>
		<queueSize>512</queueSize>  
		<appender-ref ref="errorAppender" />
	</appender>
  	<appender name="ASYNCwarnAppender" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 -->
		<discardingThreshold>0</discardingThreshold>
		<queueSize>512</queueSize>  
		<appender-ref ref="warnAppender" />
	</appender>
		<appender name="ASYNCinfoAppender" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 默认情况下，当BlockingQueue还有20%容量，他将丢弃TRACE、DEBUG和INFO级别的event，只保留WARN和ERROR级别的event。为了保持所有的events，设置该值为0。 -->
		<discardingThreshold>0</discardingThreshold>
		<queueSize>512</queueSize>  
		<appender-ref ref="infoAppender" />
	</appender>
<!--	<logger name="com.netflix" level="INFO"/>-->
<!--	<logger name="cn.com.bsfit.frms.engine" level="INFO"/>-->
<!--	<logger name="cn.com.bsfit.frms.pay.engine.loader.mob" level="INFO"/>	-->
	<!-- 根，所有logger的祖先 -->
	<root level="INFO">
		<appender-ref ref="ASYNCSTDOUT" />
		<appender-ref ref="ASYNCerrorAppender" />
		<appender-ref ref="ASYNCwarnAppender" />
		<appender-ref ref="ASYNCinfoAppender" />
	</root>
</configuration>